{"version":3,"file":"component---src-pages-dormitory-call-names-tsx-9b1406cf7fb0f36c5f14.js","mappings":"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","sources":["webpack://voicevox-blog/./src/pages/dormitory/call_names.tsx"],"sourcesContent":["import { Link } from \"gatsby\"\nimport { getSrc, getSrcSet } from \"gatsby-plugin-image\"\nimport React, {\n  CSSProperties,\n  ReactElement,\n  useContext,\n  MouseEvent,\n  useState,\n  useEffect,\n} from \"react\"\nimport { Page } from \"../../components/page\"\nimport Seo from \"../../components/seo\"\nimport { CharacterContext } from \"../../contexts/context\"\nimport { useDetailedCharacterInfo } from \"../../hooks/useDetailedCharacterInfo\"\nimport { CharacterKey } from \"../../types/dormitoryCharacter\"\nimport { DormitoryExplainComponent } from \"../dormitory\"\nimport { faCopy, faCheck } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\n\nfunction hex2rgba(hex: string, alpha = 1): [number, number, number, number] {\n  const match = hex.match(/\\w\\w/g)\n  if (!match) throw new Error(\"Invalid hex\")\n  const [red, green, blue] = match.map(x => parseInt(x, 16))\n  return [red, green, blue, alpha]\n}\n\nfunction rgba2rgbOnWhite(\n  red: number,\n  green: number,\n  blue: number,\n  alpha: number\n): [number, number, number] {\n  const _red = Math.round((1 - alpha) * 255 + alpha * red)\n  const _green = Math.round((1 - alpha) * 255 + alpha * green)\n  const _blue = Math.round((1 - alpha) * 255 + alpha * blue)\n  return [_red, _green, _blue]\n}\n\n// FIXME: Row\nfunction Column({\n  characterKey,\n}: {\n  characterKey: CharacterKey\n}): ReactElement {\n  const { characterInfos, callNameInfos } = useDetailedCharacterInfo()\n  const { characterKeys } = useContext(CharacterContext)\n\n  const [selectedCallName, setSelectedCallName] = useState<string>()\n  const [showCopiedIcon, setShowCopiedIcon] = useState(false)\n\n  const callNameInfo = callNameInfos[characterKey]\n  const characterInfo = characterInfos[characterKey]\n  const outlineStyle: CSSProperties = {\n    outlineColor: characterInfo.color,\n  }\n\n  useEffect(() => {\n    if (selectedCallName == undefined) return\n\n    const timer = setTimeout(() => {\n      setShowCopiedIcon(false)\n    }, 1500)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [showCopiedIcon, selectedCallName])\n\n  function copyToClipboard(event: MouseEvent<HTMLInputElement>): void {\n    const callName = event.currentTarget.innerText\n\n    setSelectedCallName(callName)\n    navigator.clipboard.writeText(callName)\n    setShowCopiedIcon(true)\n  }\n\n  function Cell({\n    callName,\n    externalClassName,\n  }: {\n    callName: string\n    externalClassName?: string\n  }): ReactElement {\n    const isSelected = selectedCallName === callName && showCopiedIcon\n\n    return (\n      <p\n        className={externalClassName}\n        onClick={copyToClipboard}\n        style={outlineStyle}\n        title={`クリックして呼称をコピー：「${callName}」`}\n      >\n        <span className={`icon ${isSelected ? \"selected\" : \"\"}`}>\n          <FontAwesomeIcon\n            icon={isSelected ? faCheck : faCopy}\n            color={characterInfo.color}\n          />\n        </span>\n        {callName}\n      </p>\n    )\n  }\n\n  return (\n    <>\n      {characterKeys.map(_characterKey => {\n        const callName = callNameInfo[_characterKey]\n\n        return (\n          <td key={_characterKey}>\n            <div>\n              {(() => {\n                if (_characterKey === characterKey) {\n                  return callNameInfo.me.map(part => (\n                    <Cell\n                      key={`me-${part}`}\n                      callName={part}\n                      externalClassName=\"me\"\n                    />\n                  ))\n                }\n\n                if (callName == undefined) {\n                  return (\n                    <p\n                      key={`${_characterKey}-unknown`}\n                      className=\"unknown\"\n                      style={outlineStyle}\n                    >\n                      ？\n                    </p>\n                  )\n                }\n\n                return callName\n                  .split(\"/\")\n                  .map(part => (\n                    <Cell key={`${_characterKey}-${part}`} callName={part} />\n                  ))\n              })()}\n            </div>\n          </td>\n        )\n      })}\n      <td className=\"you\">\n        <div>\n          {callNameInfo.you.map(part => (\n            <Cell key={`you-${part}`} callName={part} />\n          ))}\n        </div>\n      </td>\n    </>\n  )\n}\n\nexport default function CallNamesPage() {\n  const { characterInfos } = useDetailedCharacterInfo()\n  const { characterKeys } = useContext(CharacterContext)\n\n  function CharacterImage({\n    characterKey,\n  }: {\n    characterKey: CharacterKey\n  }): ReactElement {\n    const characterInfo = characterInfos[characterKey]\n    return (\n      <img\n        src={getSrc(characterInfo.bustupImage)}\n        srcSet={getSrcSet(characterInfo.bustupImage)}\n        alt={characterInfo.name}\n      />\n    )\n  }\n\n  return (\n    <Page showingHeaderOnTop={true}>\n      <Seo\n        title={`ボイボ寮キャラクターの呼称表 | ボイボ寮 | VOICEVOX`}\n        description={\n          \"ボイボ寮キャラクターの呼び方一覧表です。必ずしも遵守する必要はなく、自由に改変して頂いても問題ありません。\"\n        }\n      />\n\n      <div className=\"call-names-wrapper\">\n        <section className=\"section top-explain\">\n          <div className=\"container has-text-centered\">\n            <h1 className=\"title\">ボイボ寮キャラクターの呼称表</h1>\n            <p>\n              <Link\n                to=\"/dormitory/\"\n                className=\"has-text-weight-bold is-underlined\"\n              >\n                ボイボ寮\n              </Link>\n              キャラクターの呼び方一覧表です。必ずしも遵守する必要はなく、自由に改変して頂いても問題ありません。\n            </p>\n          </div>\n        </section>\n        <main className=\"call-names\">\n          <table border={1}>\n            <thead>\n              <tr>\n                <th className=\"origin\">\n                  <p>誰が</p>\n                  <p>誰を</p>\n                  <div />\n                </th>\n\n                {characterKeys.map(characterKey => {\n                  const characterInfo = characterInfos[characterKey]\n                  return (\n                    <th key={characterKey}>\n                      <Link to={`/dormitory/${characterInfo.id}/`}>\n                        <CharacterImage characterKey={characterKey} />\n                        <p\n                          style={{\n                            color: characterInfo.color,\n                          }}\n                        >\n                          {characterInfo.name}\n                        </p>\n                      </Link>\n                    </th>\n                  )\n                })}\n                <th className=\"you\">\n                  <p>全員</p>\n                  <p>（二人称）</p>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {characterKeys.map(characterKey => {\n                const characterInfo = characterInfos[characterKey]\n\n                // 色を半透明するとセルが重なったとき, スクロール時にセルが\n                // 透けて見えてしまうので, 白地での RGB に変換する\n                const [red, green, blue] = rgba2rgbOnWhite(\n                  ...hex2rgba(characterInfo.lightColor, 0.4)\n                )\n                const backgroundColor = `rgb(${red}, ${green}, ${blue})`\n\n                return (\n                  <tr key={characterKey} style={{ backgroundColor }}>\n                    <th\n                      style={{\n                        backgroundColor,\n                      }}\n                    >\n                      <Link to={`/dormitory/${characterInfo.id}/`}>\n                        <CharacterImage characterKey={characterKey} />\n                        <p\n                          style={{\n                            color: characterInfo.color,\n                          }}\n                        >\n                          {characterInfo.name}\n                        </p>\n                      </Link>\n                    </th>\n                    <Column characterKey={characterKey} />\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        </main>\n      </div>\n\n      <DormitoryExplainComponent showingDormitoryPageButton />\n    </Page>\n  )\n}\n"],"names":["rgba2rgbOnWhite","red","green","blue","alpha","Math","round","Column","_ref","characterKey","characterInfos","callNameInfos","useDetailedCharacterInfo","characterKeys","useContext","CharacterContext","selectedCallName","setSelectedCallName","useState","showCopiedIcon","setShowCopiedIcon","callNameInfo","characterInfo","outlineStyle","outlineColor","color","copyToClipboard","event","callName","currentTarget","innerText","navigator","clipboard","writeText","Cell","_ref2","externalClassName","isSelected","React","className","onClick","style","title","FontAwesomeIcon","icon","faCheck","faCopy","useEffect","undefined","timer","setTimeout","clearTimeout","map","_characterKey","key","me","part","split","you","CallNamesPage","CharacterImage","_ref3","src","getSrc","bustupImage","srcSet","getSrcSet","alt","name","Page","showingHeaderOnTop","Seo","description","Link","to","border","id","apply","_toConsumableArray","hex","match","Error","x","parseInt","hex2rgba","lightColor","backgroundColor","DormitoryExplainComponent","showingDormitoryPageButton"],"sourceRoot":""}