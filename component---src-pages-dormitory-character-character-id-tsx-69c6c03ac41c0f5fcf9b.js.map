{"version":3,"file":"component---src-pages-dormitory-character-character-id-tsx-69c6c03ac41c0f5fcf9b.js","mappings":"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","sources":["webpack://voicevox-blog/./src/components/playButton.tsx","webpack://voicevox-blog/./src/pages/dormitory/{Character.characterId}.tsx","webpack://voicevox-blog/./src/urls.ts"],"sourcesContent":["import { faPlay, faStop } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport React, { useEffect, useMemo, useState } from \"react\"\n\nexport default ({\n  url,\n  color,\n  className,\n  name,\n  style,\n}: {\n  url: string\n  name: string\n  color?: string\n} & React.HTMLAttributes<HTMLDivElement>) => {\n  const [audio, setAudio] = useState<HTMLAudioElement | null>(null)\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isReady, setIsReady] = useState(false)\n\n  useEffect(() => {\n    setAudio(new Audio(url))\n  }, [url])\n\n  const colorAddedStyle = useMemo(\n    () =>\n      !color\n        ? style\n        : {\n            backgroundColor: \"white\",\n            borderColor: color,\n            color: color,\n            ...style,\n          },\n    [color, style]\n  )\n\n  useEffect(() => {\n    if (!audio) return\n    audio.load()\n\n    const onPlayCallback = () => {\n      setIsPlaying(true)\n    }\n    const onPauseCallback = () => {\n      setIsPlaying(false)\n    }\n    const onReady = () => {\n      setIsReady(true)\n    }\n    audio.addEventListener(\"play\", onPlayCallback)\n    audio.addEventListener(\"pause\", onPauseCallback)\n    audio.addEventListener(\"canplaythrough\", onReady)\n    return () => {\n      audio.removeEventListener(\"play\", onPlayCallback)\n      audio.removeEventListener(\"pause\", onPauseCallback)\n      audio.removeEventListener(\"canplaythrough\", onReady)\n    }\n  }, [audio])\n\n  useEffect(() => {\n    return () => {\n      if (!audio) return\n\n      audio.pause()\n      setIsPlaying(false)\n      setIsReady(false)\n    }\n  }, [audio])\n\n  const play = () => {\n    audio!.play()\n  }\n\n  const stop = () => {\n    audio!.pause()\n    audio!.currentTime = 0\n  }\n\n  return (\n    <button\n      onClick={isPlaying ? stop : play}\n      className={`button circle-icon ${color || \"is-primary\"} ${\n        !isReady ? \"is-loading\" : \"\"\n      } ${className}`}\n      disabled={!isReady}\n      style={colorAddedStyle}\n      type=\"button\"\n      aria-label={`${name}を${isPlaying ? \"停止\" : \"再生\"}}`}\n    >\n      {isReady ? (\n        <FontAwesomeIcon icon={isPlaying ? faStop : faPlay} />\n      ) : undefined}\n    </button>\n  )\n}\n","import { faHome } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { Link, navigate, PageProps } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\nimport React, { useMemo, useState } from \"react\"\nimport { Page } from \"../../components/page\"\nimport PlayButton from \"../../components/playButton\"\nimport Seo from \"../../components/seo\"\nimport { characterKeys } from \"../../constants\"\nimport { useDetailedCharacterInfo } from \"../../hooks/useDetailedCharacterInfo\"\nimport { CharacterKey } from \"../../types/dormitoryCharacter\"\nimport { getProductPageUrl } from \"../../urls\"\n\ntype DescriptionType = \"プロフィール\" | \"呼び方\"\n\nexport default ({\n  location,\n  params,\n}: PageProps<null, null, { fromDormitory?: boolean }>) => {\n  const characterId: string = params.characterId\n\n  const { characterInfos, callNameInfos } = useDetailedCharacterInfo()\n\n  const selectedCharacterInfoEntry = Object.entries(characterInfos).find(\n    ([, characterInfo]) => characterInfo?.id === characterId\n  )\n  const selectedCharacterKey = selectedCharacterInfoEntry![0] as CharacterKey\n  const selectedCharacterInfo = characterInfos[selectedCharacterKey]\n\n  const [descriptionType, setDescriptionType] =\n    useState<DescriptionType>(\"プロフィール\")\n\n  const characterInfo = useMemo(\n    () => characterInfos[selectedCharacterKey],\n    [selectedCharacterKey]\n  )\n\n  const TypeButton = ({ targetType }: { targetType: DescriptionType }) => {\n    const selected = descriptionType === targetType\n    return (\n      <button\n        className={`button is-rounded description-type-button ${\n          selected && \"description-type-button-selected\"\n        }`}\n        style={{\n          color: characterInfo.color,\n          borderColor: characterInfo.color,\n          backgroundColor: selected ? characterInfo.lightColor : undefined,\n        }}\n        onClick={() => setDescriptionType(targetType)}\n        type=\"button\"\n      >\n        <span>{targetType}</span>\n      </button>\n    )\n  }\n\n  const CallBox = ({\n    targetCharacterKey,\n  }: {\n    targetCharacterKey: CharacterKey\n  }) => {\n    const Arrow = ({ leftOrRight }: { leftOrRight: \"left\" | \"right\" }) => (\n      <span\n        className=\"description-call-arrow\"\n        style={{\n          color:\n            leftOrRight === \"right\"\n              ? characterInfo.color\n              : characterInfos[targetCharacterKey].color,\n        }}\n      >\n        {leftOrRight === \"left\" ? \"←\" : \"→\"}\n      </span>\n    )\n    return (\n      <div className=\"columns is-mobile is-vcentered is-variable is-1 description-call-box\">\n        <div className=\"column description-call-line\">\n          <div className=\"description-call-one\">\n            <span\n              className=\"description-call-text\"\n              style={{ borderColor: characterInfo.color }}\n            >\n              {callNameInfos[selectedCharacterKey][targetCharacterKey]}\n            </span>\n            <Arrow leftOrRight=\"right\" />\n          </div>\n          <div className=\"description-call-one\">\n            <Arrow leftOrRight=\"left\" />\n            <span\n              className=\"description-call-text\"\n              style={{ borderColor: characterInfos[targetCharacterKey].color }}\n            >\n              {callNameInfos[targetCharacterKey][selectedCharacterKey]}\n            </span>\n          </div>\n        </div>\n        <div className=\"column is-narrow py-1\" style={{ height: \"100%\" }}>\n          <GatsbyImage\n            className=\"border-icon\"\n            image={characterInfos[targetCharacterKey].bustupImage}\n            alt={characterInfos[targetCharacterKey].name}\n            style={{\n              borderColor: characterInfos[targetCharacterKey].color,\n              height: \"100%\",\n              aspectRatio: \"1/1\",\n            }}\n            imgStyle={{ height: \"100%\", aspectRatio: \"1/1\" }}\n            objectFit=\"contain\"\n          />\n        </div>\n      </div>\n    )\n  }\n\n  // TODO: anchorにする\n  const hideCharacterModal = () => {\n    if (location.state?.fromDormitory) {\n      // ボイボ寮ページから遷移した場合はスクロール位置保持のため戻るを使う\n      navigate(-1)\n    } else {\n      // 検索流入や共有されたページから直接飛んだ場合は戻れないのでボイボ寮ページのurlを指定\n      navigate(\"/dormitory/\")\n    }\n  }\n\n  return (\n    <Page>\n      <Seo\n        title={`${selectedCharacterInfo.name} | ボイボ寮 | VOICEVOX`}\n        description={selectedCharacterInfo.description}\n        image={selectedCharacterInfo.ogpImage.images.fallback?.src}\n      />\n\n      <div className=\"dormitory-character\">\n        <main className=\"section py-1\">\n          <div className=\"container is-max-desktop\">\n            <div\n              className=\"box\"\n              style={{\n                borderColor: characterInfo.color,\n              }}\n            >\n              <div\n                className=\"link-buttons has-text-weight-bold\"\n                style={{\n                  display: \"inline-flex\",\n                  flexDirection: \"column\",\n                  position: \"absolute\",\n                  left: \"102%\",\n                  top: \"70%\",\n                }}\n              >\n                <Link\n                  to={getProductPageUrl(characterInfo)}\n                  className=\"button is-normal is-rounded character-list-button\"\n                  style={{ borderColor: characterInfo.color }}\n                >\n                  ダウンロードページ\n                </Link>\n                <Link\n                  to={\n                    // ボイボ寮ページから遷移した場合は前のキャラクターへ戻る\n                    // 検索流入や共有されたページから直接飛んだ場合は先頭へ戻る\n                    location.state?.fromDormitory\n                      ? `/dormitory/#${characterInfo.id}`\n                      : `/dormitory/`\n                  }\n                  className=\"button is-normal is-rounded character-list-button\"\n                  style={{ borderColor: characterInfo.color }}\n                >\n                  キャラクター一覧\n                </Link>\n              </div>\n              <div className=\"columns m-0\" style={{ height: \"100%\" }}>\n                <div\n                  className=\"column is-4 portrait-column\"\n                  style={{ borderColor: characterInfo.color }}\n                >\n                  <GatsbyImage\n                    image={characterInfo.portraitImage}\n                    alt={characterInfo.name}\n                    style={{ height: \"100%\", width: \"100%\" }}\n                  />\n                </div>\n                <div className=\"column description-column\">\n                  <div className=\"section\">\n                    <div className=\"description-top\">\n                      <h1\n                        className=\"title\"\n                        dangerouslySetInnerHTML={{\n                          __html: characterInfo.rubyName,\n                        }}\n                      />\n                      <a\n                        className=\"button description-top-button\"\n                        style={{\n                          color: characterInfo.color,\n                          borderColor: characterInfo.color,\n                          visibility: characterInfo.detailUrl\n                            ? \"visible\"\n                            : \"hidden\",\n                        }}\n                        href={characterInfo.detailUrl}\n                        aria-label={`${characterInfo.name}の詳細ページ`}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                      >\n                        <FontAwesomeIcon icon={faHome} />\n                      </a>\n                    </div>\n                    <div className=\"buttons has-addons\">\n                      <TypeButton targetType=\"プロフィール\" />\n                      <TypeButton targetType=\"呼び方\" />\n                    </div>\n                    {descriptionType === \"プロフィール\" && (\n                      <>\n                        <div\n                          className=\"description-profile\"\n                          dangerouslySetInnerHTML={{\n                            __html: characterInfo.description,\n                          }}\n                        />\n                        <div className=\"columns is-variable is-1 is-multiline\">\n                          {characterInfo.labelInfos.map((labelInfo, index) => (\n                            <div\n                              key={index}\n                              className={`column ${\n                                labelInfo.size == 1 ? \"is-6\" : \"is-12\"\n                              } description-box`}\n                            >\n                              <span\n                                className=\"description-label\"\n                                style={{ backgroundColor: characterInfo.color }}\n                              >\n                                {labelInfo.label}\n                              </span>\n                              <span\n                                className=\"description-text\"\n                                dangerouslySetInnerHTML={{\n                                  __html: labelInfo.value,\n                                }}\n                              />\n                            </div>\n                          ))}\n                          <div className=\"column is-12 description-box\">\n                            <span\n                              className=\"description-label\"\n                              style={{ backgroundColor: characterInfo.color }}\n                            >\n                              音声サンプル\n                            </span>\n                            {characterInfo.dormitoryVoiceUrls ? (\n                              <div className=\"description-samples\">\n                                {characterInfo.dormitoryVoiceUrls.map(\n                                  (url, index) => (\n                                    <PlayButton\n                                      key={index}\n                                      url={url}\n                                      name={`${\n                                        characterInfo.name\n                                      }のサンプルボイス${index + 1}`}\n                                      color={characterInfo.color}\n                                      className=\"ml-1 mr-1\"\n                                    />\n                                  )\n                                )}\n                              </div>\n                            ) : (\n                              <span className=\"description-text\">準備中</span>\n                            )}\n                          </div>\n                        </div>\n                        {characterInfo.infoImages && (\n                          <div className=\"description-info-images\">\n                            {characterInfo.infoImages.map((image, index) => (\n                              <GatsbyImage\n                                key={index}\n                                image={image}\n                                alt={characterInfo.name}\n                                objectFit=\"contain\"\n                                style={{\n                                  maxHeight: \"8rem\",\n                                }}\n                              />\n                            ))}\n                          </div>\n                        )}\n                      </>\n                    )}\n                    {descriptionType === \"呼び方\" && (\n                      <div className=\"columns description-call\">\n                        <div className=\"column is-3 description-call-other-column\">\n                          <div className=\"description-call-other-cell\">\n                            <div>\n                              <span>一人称</span>\n                            </div>\n                            <div>\n                              {callNameInfos[selectedCharacterKey].me.map(\n                                callName => (\n                                  <p>{callName}</p>\n                                )\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"description-call-other-cell\">\n                            <div>\n                              <span>二人称</span>\n                            </div>\n                            <div>\n                              {callNameInfos[selectedCharacterKey].you.map(\n                                callName => (\n                                  <p>{callName}</p>\n                                )\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"column is-9 description-call-character\">\n                          {characterKeys\n                            .filter(\n                              targetCharacterKey =>\n                                targetCharacterKey !== selectedCharacterKey\n                            )\n                            .map((targetCharacterKey, index) => (\n                              <CallBox\n                                key={index}\n                                targetCharacterKey={targetCharacterKey}\n                              />\n                            ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </Page>\n  )\n}\n","import { CharacterInfo } from \"./types/dormitoryCharacter\"\n\nexport const getProductPageUrl = (characterInfo: CharacterInfo) => {\n  return `/product/${characterInfo.id}/`\n}\n\nexport const getDormitoryCharacterPageUrl = (characterInfo: CharacterInfo) => {\n  return `/dormitory/${characterInfo.id}/`\n}\n"],"names":["_ref","url","color","className","name","style","audio","setAudio","useState","isPlaying","setIsPlaying","isReady","setIsReady","useEffect","Audio","colorAddedStyle","useMemo","backgroundColor","borderColor","load","onPlayCallback","onPauseCallback","onReady","addEventListener","removeEventListener","pause","React","onClick","stop","currentTime","play","disabled","type","FontAwesomeIcon","icon","faStop","faPlay","undefined","_selectedCharacterInf","_location$state2","location","params","characterId","characterInfos","callNameInfos","useDetailedCharacterInfo","selectedCharacterInfoEntry","Object","entries","find","_ref2","characterInfo","id","selectedCharacterKey","selectedCharacterInfo","descriptionType","setDescriptionType","TypeButton","_ref3","targetType","selected","lightColor","CallBox","_ref4","targetCharacterKey","Arrow","_ref5","leftOrRight","height","GatsbyImage","image","bustupImage","alt","aspectRatio","imgStyle","objectFit","Page","Seo","title","description","ogpImage","images","fallback","src","display","flexDirection","position","left","top","Link","to","getProductPageUrl","state","fromDormitory","portraitImage","width","dangerouslySetInnerHTML","__html","rubyName","visibility","detailUrl","href","target","rel","faHome","labelInfos","map","labelInfo","index","key","size","label","value","dormitoryVoiceUrls","PlayButton","infoImages","maxHeight","me","callName","you","characterKeys","filter","getDormitoryCharacterPageUrl"],"sourceRoot":""}